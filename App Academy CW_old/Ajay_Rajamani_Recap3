require "byebug"
def no_dupes?(arr)
    count = Hash.new(0)
    no_dupes = []
    arr.each { |ele| count[ele] +=1}

    count.each {|k,v| no_dupes << k if v < 2}
    no_dupes
end

# Examples
# p no_dupes?([1, 1, 2, 1, 3, 2, 4])         # => [3, 4]
# p no_dupes?(['x', 'x', 'y', 'z', 'z'])     # => ['y']
# p no_dupes?([true, true, true])            # => []

def no_consecutive_repeats?(arr)
    arr.each_with_index do |ele,i|
        return false if ele == arr[i+1]
    end
    true
end

# Examples
# p no_consecutive_repeats?(['cat', 'dog', 'mouse', 'dog'])     # => true
# p no_consecutive_repeats?(['cat', 'dog', 'dog', 'mouse'])     # => false
# p no_consecutive_repeats?([10, 42, 3, 7, 10, 3])              # => true
# p no_consecutive_repeats?([10, 42, 3, 3, 10, 3])              # => false
# p no_consecutive_repeats?(['x'])                              # => true

def char_indices(str)
    indices = Hash.new {|h,k| h[k] = Array.new}

    str.each_char.with_index do |char,i|
        indices[char] << i 
    end

    indices
end

# # Examples
# p char_indices('mississippi')   # => {"m"=>[0], "i"=>[1, 4, 7, 10], "s"=>[2, 3, 5, 6], "p"=>[8, 9]}
# p char_indices('classroom')     # => {"c"=>[0], "l"=>[1], "a"=>[2], "s"=>[3, 4], "r"=>[5], "o"=>[6, 7], "m"=>[8]}

def longest_streak(str)
    
    longest = str[0]
    max_streak = 0

    i = 0
    while i < str.length
        is_streak = true
        streak = ""
        while is_streak
            streak += str[i]
            is_streak = false
            if str[i] == str[i+1]
                
                is_streak = true
                i+=1
            else
                i+=1
            end
            longest, max_streak = streak, streak.length if streak.length >= max_streak
        end


        
    end

    longest
end

# # Examples
# p longest_streak('a')           # => 'a'
# p    longest_streak('accccbbb')    # => 'cccc'
#  p   longest_streak('aaaxyyyyyzz') # => 'yyyyy
#   p  longest_streak('aaabbb')      # => 'bbb'
#    p longest_streak('abc')         # => 'c'

def bi_prime?(num)

    factors = []
    (2...num).each do |n|
        if num%n == 0
            f1 = n
            f2 = num/n
            return true if is_prime?(f1) and is_prime?(f2) 
        
        end
    end
    false
end

def is_prime?(num)
    return false if num < 2
    (2...num).each {|factor| return false if num%factor == 0}
    true
end

# # Examples
# p bi_prime?(14)   # => true
# p bi_prime?(22)   # => true
# p bi_prime?(25)   # => true
# p bi_prime?(94)   # => true
# p bi_prime?(24)   # => false
# p bi_prime?(64)   # => false

def vigenere_cipher(message,keys)
    encrypted = ""
    alpha = "abcdefghijklmnopqrstuvwxyz"
    i = 0
    message.each_char do |char|
        shift = alpha.index(char)  + keys[i%keys.length]
        encrypted += alpha[shift%26]
        i+=1
    end

    encrypted


end

# p    vigenere_cipher("toerrishuman", [1])        # => "upfssjtivnbo"
#  p   vigenere_cipher("toerrishuman", [1, 2])     # => "uqftsktjvobp"
#  p   vigenere_cipher("toerrishuman", [1, 2, 3])  # => "uqhstltjxncq"
#  p   vigenere_cipher("zebra", [3, 0])            # => "ceerd"
#  p   vigenere_cipher("yawn", [5, 1])             # => "dbbo"

def vowel_rotate(str)
    vowels = "aeiou"
    rotated = ""
    vow_seq = []
    str.each_char {|char| vow_seq << char if vowels.include?(char)}
    
    i = -1
    v = -2
    while i >= -str.length 

        if vowels.include?(str[i])
            new_char = vow_seq[v] || vow_seq[-1]
            rotated += new_char
            v-=1
        else
            rotated +=str[i]
        
        end 
        i-=1
    end
    rotated.reverse  
end

# p vowel_rotate('computer')      # => "cempotur"
# p vowel_rotate('oranges')       # => "erongas"
# p vowel_rotate('headphones')    # => "heedphanos"
# p vowel_rotate('bootcamp')      # => "baotcomp"
# p vowel_rotate('awesome')       # => "ewasemo"

class String

    def select (&crit)
        crit ||= Proc.new {|x| false}
        newstr = ""
        self.each_char do |char|
            newstr += char if crit.call(char)
        end
        newstr
    end

    def map!(&crit)

        i = 0
        while i < self.length
            self[i] = crit.call(self[i],i)
            i+=1
        end
    end

    


end

# p "app academy".select { |ch| !"aeiou".include?(ch) }   # => "pp cdmy"
# p "HELLOworld".select { |ch| ch == ch.upcase }          # => "HELLO"
# p "HELLOworld".select          # => ""

# # Examples
# word_1 = "Lovelace"
# word_1.map! do |ch| 
#     if ch == 'e'
#         '3'
#     elsif ch == 'a'
#         '4'
#     else
#         ch
#     end
# end
# p word_1        # => "Lov3l4c3"

# word_2 = "Dijkstra"
# word_2.map! do |ch, i|
#     if i.even?
#         ch.upcase
#     else
#         ch.downcase
#     end
# end
# p word_2        # => "DiJkStRa"

def multiply(a,b)
    
    if b == 1
        return a 
    elsif b == 0 
        return 0
    end
    if (a > 0 and b > 0)

        return a + multiply(a,b-1)
    elsif (a < 0 and b < 0)
        return -a + multiply(-a,-b-1)
    elsif a>0 and b < 0
        return -a - multiply(-a, b+1)
    else
        return a + multiply(a,b-1)
    end

end

# Examples
# p multiply(3, 5)        # => 15
# p multiply(5, 3)        # => 15
# p multiply(2, 4)        # => 8
# p multiply(0, 10)       # => 0
# p multiply(-3, -6)      # => 18
# p multiply(3, -6)       # => -18
# p multiply(-3, 6)       # => -18

def lucas_sequence(n)
    return [] if n ==0
    return [2] if n == 1
    return [2,1] if n == 2

    seq = lucas_sequence(n-1)
    seq << (seq[-1] + seq[-2])
    seq 
end


# # Examples
# p     lucas_sequence(0)   # => []
#   p   lucas_sequence(1)   # => [2]    
#     p lucas_sequence(2)   # => [2, 1]
#     p lucas_sequence(3)   # => [2, 1, 3]
#     p lucas_sequence(6)   # => [2, 1, 3, 4, 7, 11]
#     p lucas_sequence(8)   # => [2, 1, 3, 4, 7, 11, 18, 29]

def prime_factorization(n)
    factors = []
    (2..n).each do |factor|
        if n%factor == 0
            factors<<factor
            return factors +  prime_factorization(n/factor) 
        end
        
    end
    factors
end

# # Examples
# p prime_factorization(12)     # => [2, 2, 3]
# p prime_factorization(24)     # => [2, 2, 2, 3]
# p prime_factorization(25)     # => [5, 5]
# p prime_factorization(60)     # => [2, 2, 3, 5]
# p prime_factorization(7)      # => [7]
# p prime_factorization(11)     # => [11]
# p prime_factorization(2017)   # => [2017]


